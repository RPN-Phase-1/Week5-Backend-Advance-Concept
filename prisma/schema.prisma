// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String?    @unique
  password  String    
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updateAt  DateTime  @default(now())
  isEmailVerified Boolean @default(false)
  tokens    Token[]
  tasks            TaskUser[]
  subTasks         SubTaskUser[]
}
model Token {
  id        String    @id @default(uuid())
  token     String    @db.VarChar(400)
  userId    String    
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  expires   DateTime
  blacklisted Boolean @default(false)
  createdAt DateTime  @default(now())
  updateAt  DateTime  @default(now())
}
model Task {
  id          String      @id @default(uuid())
  title       String
  description String?
  isDone      Int         @default(0)
  priority    Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  users       TaskUser[]
  subTasks    SubTask[]
}

model SubTask {
  id          String        @id @default(uuid())
  title       String
  isDone      Int         @default(0)
  taskId      String
  Task        Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  users       SubTaskUser[]
}

model TaskUser {
  id          String    @id @default(uuid())
  userId      String
  taskId      String
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  
  @@unique([userId, taskId])
}

model SubTaskUser {
  id          String    @id @default(uuid())
  userId      String
  subTaskId   String
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  SubTask     SubTask   @relation(fields: [subTaskId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())

  @@unique([userId, subTaskId])
}